题目描述
你需要开发一款文字处理软件。最开始时输入一个字符串（不超过 100 个字符）作为初始文档。可以认为文档开头是第 0 个字符。需要支持以下操作：

1 str：后接插入，在文档后面插入字符串 str，并输出文档的字符串。

2 a b：截取文档部分，只保留文档中从第 a 个字符起 b 个字符，并输出文档的字符串。

3 a str：插入片段，在文档中第 a 个字符前面插入字符串 str，并输出文档的字符串。

4 str：查找子串，查找字符串 str 在文档中最先的位置并输出；如果找不到输出 -1。

为了简化问题，规定初始的文档和每次操作中的 str 都不含有空格或换行。最多会有 q(q\le100)q(q≤100) 次操作。

输入格式
无

输出格式
无

输入输出样例
输入 #1复制
4
ILove
1 Luogu
2 5 5
3 3 guGugu
4 gu
输出 #1复制
ILoveLuogu
Luogu
LuoguGugugu
3

#include<iostream>
#include<cstring>
using namespace std;
int main() {
	int q = 0;
	cin >> q;
	char initial[1000] = { '\0' };
	cin >> initial;
	int op = 0;
	while (q--) {
		cin >> op;
		switch (op) {
		case 1: {
			char temp[100] = { '\0' };
			cin >> temp;
			int len1 = strlen(initial);
			int len2 = strlen(temp);
			for (int i = len1; i < len1 + len2; i++) {
				initial[i] = temp[i - len1];
			}
			for (int i = 0; i < len1 + len2; i++) {
				cout << initial[i];
			}
			cout << '\0' << endl;
			break;
		}
		case 2: {
			int a = 0, b = 0;
			cin >> a >> b;
			char temp[1000] = { '\0' };
			for (int i = 0; i < b; i++) {
				temp[i] = initial[i + a];
			}
			strcpy_s(initial, temp);
			cout << initial << endl;
			break;
		}
		case 3: {
			int a = 0;
			cin >> a;
			char temp1[1000] = { '\0' };
			for (int i = 0; i < strlen(initial)-a; i++) {
				temp1[i] = initial[a+i];
			}
			int len1 = strlen(temp1);
			char temp2[1000] = { '\0' };
			cin >> temp2;
			int len2 = strlen(temp2);
			for (int i = a; i < a + len2; i++) {
				initial[i] = temp2[i - a];
			}
			for (int i = a + len2; i < a + len2 + len1; i++) {
				initial[i] = temp1[i - a - len2];
			}
			for (int i = 0; i < a + len1 + len2; i++) {
				cout << initial[i];
			}
			cout << '\0' << endl;
			break;
		}
		case 4: {
			char ch[100] = { '\0' };
			cin >> ch;
			int len = strlen(ch);
			int iflag = 0;
			for (int i = 0; i < strlen(initial)-len+1; i++) {
				int flag = 0;
				for (int j = 0; j < len; j++) {
					if (ch[j] != initial[i + j]) {
						flag = 1;
						break;
					}
				}
				if (flag == 1) {
					continue;
				}
				else {
					cout << i << endl;
					iflag = 1;
					break;
				}
			}
			if (iflag == 0) {
				cout << "-1" << endl;
			}
			break;
		}
		default:break;
		}
	}
	return 0;
}
