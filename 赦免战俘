题目背景
借助反作弊系统，一些在月赛有抄袭作弊行为的选手被抓出来了！

题目描述
现有 2^n\times 2^n (n\le10)2 
n
 ×2 
n
 (n≤10) 名作弊者站成一个正方形方阵等候 kkksc03 的发落。kkksc03 决定赦免一些作弊者。他将正方形矩阵均分为 4 个更小的正方形矩阵，每个更小的矩阵的边长是原矩阵的一半。其中左上角那一个矩阵的所有作弊者都将得到赦免，剩下 3 个小矩阵中，每一个矩阵继续分为 4 个更小的矩阵，然后通过同样的方式赦免作弊者……直到矩阵无法再分下去为止。所有没有被赦免的作弊者都将被处以棕名处罚。

给出 nn，请输出每名作弊者的命运，其中 0 代表被赦免，1 代表不被赦免。

输入格式
一个整数 nn。

输出格式
2^n \times 2^n2 
n
 ×2 
n
  的 01 矩阵，代表每个人是否被赦免。数字之间有一个空格。

输入输出样例
输入 #1复制
3
输出 #1复制
0 0 0 0 0 0 0 1
0 0 0 0 0 0 1 1
0 0 0 0 0 1 0 1
0 0 0 0 1 1 1 1
0 0 0 1 0 0 0 1
0 0 1 1 0 0 1 1
0 1 0 1 0 1 0 1
1 1 1 1 1 1 1 1

#include<iostream>
#include<cmath>
using namespace std;
int flag[1024][1024] = { 0 };
void process(int i,int len) {
	int temp = (int)pow(2, i);
	for (i = 0; i < len; i++) {
		if ((i / temp) % 2 == 0) {
			for (int j = 0; j < len; j++) {
				if ((j / temp) % 2 == 0) {
					flag[i][j] = 0;
				}
			}
		}
	}
	return;
}
int main() {
	int n = 0;
	cin >> n;
	int len = (int)pow(2, n);
	for (int i = 0; i < len; i++) {
		for (int j = 0; j < len; j++) {
			flag[i][j]++;
		}
	}
	for (int i = n - 1; i >= 0; i--) {
		process(i,len);
	}
	for (int i = 0; i < len; i++) {
		for (int j = 0; j < len; j++) {
			cout << flag[i][j];
			if (j < len - 1) {
				cout << " ";
			}
			else {
				cout << endl;
			}
		}
	}
	return 0;
}
